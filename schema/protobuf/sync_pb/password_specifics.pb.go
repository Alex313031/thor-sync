// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Sync protocol datatype extension for password data.

// If you change or add any fields in this file, update proto_visitors.h and
// potentially proto_enum_conversions.{h, cc}.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.1
// source: password_specifics.proto

package sync_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// All the strings are encoded with UTF-8. URLs are encoded in Punycode.
type PasswordSpecificsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
	// android credential or a password saved through Credential Management API
	// (https://w3c.github.io/webappsec/specs/credentialmanagement/).
	// SCHEME_BASIC(1), basic access http authentication.
	// SCHEME_DIGEST(2), digest access authentication.
	// SCHEME_OTHER(3), another access authentication.
	Scheme *int32 `protobuf:"varint,1,opt,name=scheme" json:"scheme,omitempty"`
	// For parsed web forms and normal passwords saved through Credential Manager
	// API: url-scheme://url-host[:url-port]/
	// For Android apps (local + federated):
	//     "android://<hash of cert>@<package name>/"
	// where the hash is base64 encoded SHA512 of the app's public certificate.
	// For federated credentials:
	//     "federation://" + origin_host + "/" + federation_host
	// For proxy auth: proxy-host/auth-realm
	// For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
	SignonRealm *string `protobuf:"bytes,2,opt,name=signon_realm,json=signonRealm" json:"signon_realm,omitempty"`
	// For parsed web forms and Credential Management API:
	//     url-scheme://url-host[:url-port]/path
	// For Android: "android://<hash of cert>@<package name>/"
	// For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
	Origin *string `protobuf:"bytes,3,opt,name=origin" json:"origin,omitempty"`
	// Only for web-parsed forms - the action target of the form:
	//     url-scheme://url-host[:url-port]/path
	Action *string `protobuf:"bytes,4,opt,name=action" json:"action,omitempty"`
	// Only for web-parsed forms - the name of the element containing username.
	UsernameElement *string `protobuf:"bytes,5,opt,name=username_element,json=usernameElement" json:"username_element,omitempty"`
	// For all: the username.
	// For blacklisted forms: <empty>.
	UsernameValue *string `protobuf:"bytes,6,opt,name=username_value,json=usernameValue" json:"username_value,omitempty"`
	// Only for web-parsed forms - the name of the element containing password.
	PasswordElement *string `protobuf:"bytes,7,opt,name=password_element,json=passwordElement" json:"password_element,omitempty"`
	// For all: the password.
	// For federated logins and blacklisted forms: <empty>
	PasswordValue *string `protobuf:"bytes,8,opt,name=password_value,json=passwordValue" json:"password_value,omitempty"`
	// Deprecated: http://crbug.com/413020
	// True if the credential was saved for a HTTPS session with a valid SSL cert.
	// Ignored for Android apps.
	//
	// Deprecated: Do not use.
	SslValid *bool `protobuf:"varint,9,opt,name=ssl_valid,json=sslValid" json:"ssl_valid,omitempty"`
	// True for the last credential used for logging in on a given site.
	// Deprecated in M81.
	//
	// Deprecated: Do not use.
	Preferred *bool `protobuf:"varint,10,opt,name=preferred" json:"preferred,omitempty"`
	// Time when the credential was created. Amount of microseconds since 1601.
	DateCreated *int64 `protobuf:"varint,11,opt,name=date_created,json=dateCreated" json:"date_created,omitempty"`
	// True, if user chose permanently not to save the credentials for the form.
	Blacklisted *bool `protobuf:"varint,12,opt,name=blacklisted" json:"blacklisted,omitempty"`
	// kFormSubmission(0), user manually filled the username and the password
	// in the form.
	// kGenerated(1), the credential was auto generated.
	// kApi(2), the credential was generated from Credential Management API.
	// kManuallyAdded(3), user manually created the password credential
	// via Settings.
	Type *int32 `protobuf:"varint,13,opt,name=type" json:"type,omitempty"`
	// Number of times this login was used for logging in. Chrome uses this field
	// to distinguish log-in and sign-up forms.
	TimesUsed *int32 `protobuf:"varint,14,opt,name=times_used,json=timesUsed" json:"times_used,omitempty"`
	// A human readable name of the account holder. Set by CredentialManager API
	// and Android.
	DisplayName *string `protobuf:"bytes,15,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// A URL of the avatar for the credential. Set by CredentialManager API and
	// Android.
	AvatarUrl *string `protobuf:"bytes,16,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	// A URL of the IdP used to verify the credential. Set by Credential Manager
	// API and Android.
	FederationUrl *string `protobuf:"bytes,17,opt,name=federation_url,json=federationUrl" json:"federation_url,omitempty"`
	// Time when the credential was last used. This covers *successful* logins to
	// the website, and explicit updates to the password. It does *not* cover if
	// the password just gets filled but not actually submitted, or if the login
	// failed.
	// Note that password consumers other than Chrome (e.g. Google Play Services)
	// might not update this at all.
	// Amount of microseconds since 1601, aka Windows epoch.
	DateLastUsed *int64 `protobuf:"varint,18,opt,name=date_last_used,json=dateLastUsed" json:"date_last_used,omitempty"`
	// Set if an issue was detected that puts this password at risk. All the
	// clients are expected to clear the field when the password value is updated.
	// 'reused' part can be additionally reset when the analysis on the entire
	// password store is completed.
	PasswordIssues *PasswordSpecificsData_PasswordIssues `protobuf:"bytes,19,opt,name=password_issues,json=passwordIssues" json:"password_issues,omitempty"`
	// Time when the |password_value| was last modified. For new credentials it
	// should be set to |date_created|. For subsequent updates the timestamp is
	// changed if and only if the new password value was saved.
	// Number of microseconds since Windows epoch (1601).
	DatePasswordModifiedWindowsEpochMicros *int64 `protobuf:"varint,20,opt,name=date_password_modified_windows_epoch_micros,json=datePasswordModifiedWindowsEpochMicros" json:"date_password_modified_windows_epoch_micros,omitempty"`
	// Set of extra notes that the user attached to the password. The presence of
	// this field, even with an empty Notes message, becomes the authoritative
	// value for notes and would disregard whatever `encrypted_notes_backup`
	// contains.
	Notes *PasswordSpecificsData_Notes `protobuf:"bytes,21,opt,name=notes" json:"notes,omitempty"`
}

func (x *PasswordSpecificsData) Reset() {
	*x = PasswordSpecificsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_password_specifics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordSpecificsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordSpecificsData) ProtoMessage() {}

func (x *PasswordSpecificsData) ProtoReflect() protoreflect.Message {
	mi := &file_password_specifics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordSpecificsData.ProtoReflect.Descriptor instead.
func (*PasswordSpecificsData) Descriptor() ([]byte, []int) {
	return file_password_specifics_proto_rawDescGZIP(), []int{0}
}

func (x *PasswordSpecificsData) GetScheme() int32 {
	if x != nil && x.Scheme != nil {
		return *x.Scheme
	}
	return 0
}

func (x *PasswordSpecificsData) GetSignonRealm() string {
	if x != nil && x.SignonRealm != nil {
		return *x.SignonRealm
	}
	return ""
}

func (x *PasswordSpecificsData) GetOrigin() string {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return ""
}

func (x *PasswordSpecificsData) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *PasswordSpecificsData) GetUsernameElement() string {
	if x != nil && x.UsernameElement != nil {
		return *x.UsernameElement
	}
	return ""
}

func (x *PasswordSpecificsData) GetUsernameValue() string {
	if x != nil && x.UsernameValue != nil {
		return *x.UsernameValue
	}
	return ""
}

func (x *PasswordSpecificsData) GetPasswordElement() string {
	if x != nil && x.PasswordElement != nil {
		return *x.PasswordElement
	}
	return ""
}

func (x *PasswordSpecificsData) GetPasswordValue() string {
	if x != nil && x.PasswordValue != nil {
		return *x.PasswordValue
	}
	return ""
}

// Deprecated: Do not use.
func (x *PasswordSpecificsData) GetSslValid() bool {
	if x != nil && x.SslValid != nil {
		return *x.SslValid
	}
	return false
}

// Deprecated: Do not use.
func (x *PasswordSpecificsData) GetPreferred() bool {
	if x != nil && x.Preferred != nil {
		return *x.Preferred
	}
	return false
}

func (x *PasswordSpecificsData) GetDateCreated() int64 {
	if x != nil && x.DateCreated != nil {
		return *x.DateCreated
	}
	return 0
}

func (x *PasswordSpecificsData) GetBlacklisted() bool {
	if x != nil && x.Blacklisted != nil {
		return *x.Blacklisted
	}
	return false
}

func (x *PasswordSpecificsData) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *PasswordSpecificsData) GetTimesUsed() int32 {
	if x != nil && x.TimesUsed != nil {
		return *x.TimesUsed
	}
	return 0
}

func (x *PasswordSpecificsData) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *PasswordSpecificsData) GetAvatarUrl() string {
	if x != nil && x.AvatarUrl != nil {
		return *x.AvatarUrl
	}
	return ""
}

func (x *PasswordSpecificsData) GetFederationUrl() string {
	if x != nil && x.FederationUrl != nil {
		return *x.FederationUrl
	}
	return ""
}

func (x *PasswordSpecificsData) GetDateLastUsed() int64 {
	if x != nil && x.DateLastUsed != nil {
		return *x.DateLastUsed
	}
	return 0
}

func (x *PasswordSpecificsData) GetPasswordIssues() *PasswordSpecificsData_PasswordIssues {
	if x != nil {
		return x.PasswordIssues
	}
	return nil
}

func (x *PasswordSpecificsData) GetDatePasswordModifiedWindowsEpochMicros() int64 {
	if x != nil && x.DatePasswordModifiedWindowsEpochMicros != nil {
		return *x.DatePasswordModifiedWindowsEpochMicros
	}
	return 0
}

func (x *PasswordSpecificsData) GetNotes() *PasswordSpecificsData_Notes {
	if x != nil {
		return x.Notes
	}
	return nil
}

// Contains the password specifics metadata which simplifies its lookup.
type PasswordSpecificsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// True, if user chose permanently not to save the credentials for the form.
	// Introduced in M82.
	Blacklisted *bool `protobuf:"varint,2,opt,name=blacklisted" json:"blacklisted,omitempty"`
}

func (x *PasswordSpecificsMetadata) Reset() {
	*x = PasswordSpecificsMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_password_specifics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordSpecificsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordSpecificsMetadata) ProtoMessage() {}

func (x *PasswordSpecificsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_password_specifics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordSpecificsMetadata.ProtoReflect.Descriptor instead.
func (*PasswordSpecificsMetadata) Descriptor() ([]byte, []int) {
	return file_password_specifics_proto_rawDescGZIP(), []int{1}
}

func (x *PasswordSpecificsMetadata) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PasswordSpecificsMetadata) GetBlacklisted() bool {
	if x != nil && x.Blacklisted != nil {
		return *x.Blacklisted
	}
	return false
}

// Properties of password sync objects.
type PasswordSpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual password data. Contains an encrypted PasswordSpecificsData
	// message.
	Encrypted *EncryptedData `protobuf:"bytes,1,opt,name=encrypted" json:"encrypted,omitempty"`
	// An unsynced field for use internally on the client. This field should
	// never be set in any network-based communications because it contains
	// unencrypted material.
	ClientOnlyEncryptedData *PasswordSpecificsData `protobuf:"bytes,2,opt,name=client_only_encrypted_data,json=clientOnlyEncryptedData" json:"client_only_encrypted_data,omitempty"`
	// Password related metadata, which is sent to the server side. The field
	// should never be set for full encryption users. If encryption is enabled,
	// this field must be cleared.
	UnencryptedMetadata *PasswordSpecificsMetadata `protobuf:"bytes,3,opt,name=unencrypted_metadata,json=unencryptedMetadata" json:"unencrypted_metadata,omitempty"`
	// An encrypted backup of the notes field inside the PasswordSpecificsData.
	// The Sync server preserves the contents of this field across commits from
	// legacy clients that don't set this field. It is the responsibility of Sync
	// clients to populate the contents of PasswordSpecificsData notes fields
	// using the contents of this field. This should be deprecated together with
	// the logic for preserving it on the server when clients without support for
	// the |notes| field are no longer allowed by the server (below support
	// version horizon).
	//
	// Encryption key considerations:
	// a) For commits, the client must use the same key for both encrypted blobs.
	// b) For handling getupdates, the two keys may NOT necessarily match the
	//    encryption key used, as in theory the new blob could be "behind" if key
	//    rotation took place. As of today, it is safe to assume that if
	//    |encrypted| is decryptable by a client, then |encrypted_notes_backup|
	//    must be decryptable too (i.e. the Nigori keybag should include older
	//    versions of the key). But not the other way round.
	//
	// If both `encrypted_notes_backup` and the `notes` in `encrypted` are
	// populated, the one in notes is considered the authoritative value.
	EncryptedNotesBackup *EncryptedData `protobuf:"bytes,4,opt,name=encrypted_notes_backup,json=encryptedNotesBackup" json:"encrypted_notes_backup,omitempty"`
}

func (x *PasswordSpecifics) Reset() {
	*x = PasswordSpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_password_specifics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordSpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordSpecifics) ProtoMessage() {}

func (x *PasswordSpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_password_specifics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordSpecifics.ProtoReflect.Descriptor instead.
func (*PasswordSpecifics) Descriptor() ([]byte, []int) {
	return file_password_specifics_proto_rawDescGZIP(), []int{2}
}

func (x *PasswordSpecifics) GetEncrypted() *EncryptedData {
	if x != nil {
		return x.Encrypted
	}
	return nil
}

func (x *PasswordSpecifics) GetClientOnlyEncryptedData() *PasswordSpecificsData {
	if x != nil {
		return x.ClientOnlyEncryptedData
	}
	return nil
}

func (x *PasswordSpecifics) GetUnencryptedMetadata() *PasswordSpecificsMetadata {
	if x != nil {
		return x.UnencryptedMetadata
	}
	return nil
}

func (x *PasswordSpecifics) GetEncryptedNotesBackup() *EncryptedData {
	if x != nil {
		return x.EncryptedNotesBackup
	}
	return nil
}

type PasswordSpecificsData_PasswordIssues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeakedPasswordIssue  *PasswordSpecificsData_PasswordIssues_PasswordIssue `protobuf:"bytes,1,opt,name=leaked_password_issue,json=leakedPasswordIssue" json:"leaked_password_issue,omitempty"`
	ReusedPasswordIssue  *PasswordSpecificsData_PasswordIssues_PasswordIssue `protobuf:"bytes,2,opt,name=reused_password_issue,json=reusedPasswordIssue" json:"reused_password_issue,omitempty"`
	WeakPasswordIssue    *PasswordSpecificsData_PasswordIssues_PasswordIssue `protobuf:"bytes,3,opt,name=weak_password_issue,json=weakPasswordIssue" json:"weak_password_issue,omitempty"`
	PhishedPasswordIssue *PasswordSpecificsData_PasswordIssues_PasswordIssue `protobuf:"bytes,4,opt,name=phished_password_issue,json=phishedPasswordIssue" json:"phished_password_issue,omitempty"`
}

func (x *PasswordSpecificsData_PasswordIssues) Reset() {
	*x = PasswordSpecificsData_PasswordIssues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_password_specifics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordSpecificsData_PasswordIssues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordSpecificsData_PasswordIssues) ProtoMessage() {}

func (x *PasswordSpecificsData_PasswordIssues) ProtoReflect() protoreflect.Message {
	mi := &file_password_specifics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordSpecificsData_PasswordIssues.ProtoReflect.Descriptor instead.
func (*PasswordSpecificsData_PasswordIssues) Descriptor() ([]byte, []int) {
	return file_password_specifics_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PasswordSpecificsData_PasswordIssues) GetLeakedPasswordIssue() *PasswordSpecificsData_PasswordIssues_PasswordIssue {
	if x != nil {
		return x.LeakedPasswordIssue
	}
	return nil
}

func (x *PasswordSpecificsData_PasswordIssues) GetReusedPasswordIssue() *PasswordSpecificsData_PasswordIssues_PasswordIssue {
	if x != nil {
		return x.ReusedPasswordIssue
	}
	return nil
}

func (x *PasswordSpecificsData_PasswordIssues) GetWeakPasswordIssue() *PasswordSpecificsData_PasswordIssues_PasswordIssue {
	if x != nil {
		return x.WeakPasswordIssue
	}
	return nil
}

func (x *PasswordSpecificsData_PasswordIssues) GetPhishedPasswordIssue() *PasswordSpecificsData_PasswordIssues_PasswordIssue {
	if x != nil {
		return x.PhishedPasswordIssue
	}
	return nil
}

type PasswordSpecificsData_Notes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note []*PasswordSpecificsData_Notes_Note `protobuf:"bytes,1,rep,name=note" json:"note,omitempty"`
}

func (x *PasswordSpecificsData_Notes) Reset() {
	*x = PasswordSpecificsData_Notes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_password_specifics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordSpecificsData_Notes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordSpecificsData_Notes) ProtoMessage() {}

func (x *PasswordSpecificsData_Notes) ProtoReflect() protoreflect.Message {
	mi := &file_password_specifics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordSpecificsData_Notes.ProtoReflect.Descriptor instead.
func (*PasswordSpecificsData_Notes) Descriptor() ([]byte, []int) {
	return file_password_specifics_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PasswordSpecificsData_Notes) GetNote() []*PasswordSpecificsData_Notes_Note {
	if x != nil {
		return x.Note
	}
	return nil
}

type PasswordSpecificsData_PasswordIssues_PasswordIssue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp set by a client detecting the issue for the first time.
	// Number of microseconds since Windows epoch (1601).
	// This can be unset even if is_muted is set in a few cases in
	// storage (for a time mutes were written without setting this
	// field - fixed starting 2021-11-10).
	DateFirstDetectionMicroseconds *uint64 `protobuf:"varint,1,opt,name=date_first_detection_microseconds,json=dateFirstDetectionMicroseconds" json:"date_first_detection_microseconds,omitempty"`
	// Whether the issue was muted by user.
	IsMuted *bool `protobuf:"varint,2,opt,name=is_muted,json=isMuted" json:"is_muted,omitempty"`
}

func (x *PasswordSpecificsData_PasswordIssues_PasswordIssue) Reset() {
	*x = PasswordSpecificsData_PasswordIssues_PasswordIssue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_password_specifics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordSpecificsData_PasswordIssues_PasswordIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordSpecificsData_PasswordIssues_PasswordIssue) ProtoMessage() {}

func (x *PasswordSpecificsData_PasswordIssues_PasswordIssue) ProtoReflect() protoreflect.Message {
	mi := &file_password_specifics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordSpecificsData_PasswordIssues_PasswordIssue.ProtoReflect.Descriptor instead.
func (*PasswordSpecificsData_PasswordIssues_PasswordIssue) Descriptor() ([]byte, []int) {
	return file_password_specifics_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *PasswordSpecificsData_PasswordIssues_PasswordIssue) GetDateFirstDetectionMicroseconds() uint64 {
	if x != nil && x.DateFirstDetectionMicroseconds != nil {
		return *x.DateFirstDetectionMicroseconds
	}
	return 0
}

func (x *PasswordSpecificsData_PasswordIssues_PasswordIssue) GetIsMuted() bool {
	if x != nil && x.IsMuted != nil {
		return *x.IsMuted
	}
	return false
}

type PasswordSpecificsData_Notes_Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The display name must be unique within the scope of a password.
	UniqueDisplayName *string `protobuf:"bytes,1,opt,name=unique_display_name,json=uniqueDisplayName" json:"unique_display_name,omitempty"`
	// The user-defined value of the note.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// The creation time of the note. Number of microseconds since 1601.
	DateCreatedWindowsEpochMicros *int64 `protobuf:"varint,3,opt,name=date_created_windows_epoch_micros,json=dateCreatedWindowsEpochMicros" json:"date_created_windows_epoch_micros,omitempty"`
	// Whether the value of the note is not displayed in plain text by
	// default.
	HideByDefault *bool `protobuf:"varint,4,opt,name=hide_by_default,json=hideByDefault" json:"hide_by_default,omitempty"`
}

func (x *PasswordSpecificsData_Notes_Note) Reset() {
	*x = PasswordSpecificsData_Notes_Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_password_specifics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordSpecificsData_Notes_Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordSpecificsData_Notes_Note) ProtoMessage() {}

func (x *PasswordSpecificsData_Notes_Note) ProtoReflect() protoreflect.Message {
	mi := &file_password_specifics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordSpecificsData_Notes_Note.ProtoReflect.Descriptor instead.
func (*PasswordSpecificsData_Notes_Note) Descriptor() ([]byte, []int) {
	return file_password_specifics_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *PasswordSpecificsData_Notes_Note) GetUniqueDisplayName() string {
	if x != nil && x.UniqueDisplayName != nil {
		return *x.UniqueDisplayName
	}
	return ""
}

func (x *PasswordSpecificsData_Notes_Note) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PasswordSpecificsData_Notes_Note) GetDateCreatedWindowsEpochMicros() int64 {
	if x != nil && x.DateCreatedWindowsEpochMicros != nil {
		return *x.DateCreatedWindowsEpochMicros
	}
	return 0
}

func (x *PasswordSpecificsData_Notes_Note) GetHideByDefault() bool {
	if x != nil && x.HideByDefault != nil {
		return *x.HideByDefault
	}
	return false
}

var File_password_specifics_proto protoreflect.FileDescriptor

var file_password_specifics_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x1a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x0d, 0x0a, 0x15, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f,
	0x0a, 0x09, 0x73, 0x73, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x73, 0x73, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x12, 0x5b, 0x0a, 0x2b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x73, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x26, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x73, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x3a, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x1a, 0xc9, 0x04, 0x0a, 0x0e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x6f, 0x0a, 0x15,
	0x6c, 0x65, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x13, 0x6c, 0x65, 0x61, 0x6b, 0x65, 0x64,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x6f, 0x0a,
	0x15, 0x72, 0x65, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x13, 0x72, 0x65, 0x75, 0x73, 0x65,
	0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x6b,
	0x0a, 0x13, 0x77, 0x65, 0x61, 0x6b, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x11, 0x77, 0x65, 0x61, 0x6b, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x71, 0x0a, 0x16, 0x70,
	0x68, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x14, 0x70, 0x68, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x1a, 0x75,
	0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12,
	0x49, 0x0a, 0x21, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x4d, 0x75, 0x74, 0x65, 0x64, 0x1a, 0x87, 0x02, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x3d, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0xbe,
	0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x48, 0x0a,
	0x21, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x5f,
	0x62, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x68, 0x69, 0x64, 0x65, 0x42, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22,
	0x4f, 0x0a, 0x19, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x22, 0xcb, 0x02, 0x0a, 0x11, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x1a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x14, 0x75, 0x6e, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x75, 0x6e, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x4c, 0x0a, 0x16, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x2b,
	0x0a, 0x25, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x03, 0x50, 0x01,
}

var (
	file_password_specifics_proto_rawDescOnce sync.Once
	file_password_specifics_proto_rawDescData = file_password_specifics_proto_rawDesc
)

func file_password_specifics_proto_rawDescGZIP() []byte {
	file_password_specifics_proto_rawDescOnce.Do(func() {
		file_password_specifics_proto_rawDescData = protoimpl.X.CompressGZIP(file_password_specifics_proto_rawDescData)
	})
	return file_password_specifics_proto_rawDescData
}

var file_password_specifics_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_password_specifics_proto_goTypes = []interface{}{
	(*PasswordSpecificsData)(nil),                              // 0: sync_pb.PasswordSpecificsData
	(*PasswordSpecificsMetadata)(nil),                          // 1: sync_pb.PasswordSpecificsMetadata
	(*PasswordSpecifics)(nil),                                  // 2: sync_pb.PasswordSpecifics
	(*PasswordSpecificsData_PasswordIssues)(nil),               // 3: sync_pb.PasswordSpecificsData.PasswordIssues
	(*PasswordSpecificsData_Notes)(nil),                        // 4: sync_pb.PasswordSpecificsData.Notes
	(*PasswordSpecificsData_PasswordIssues_PasswordIssue)(nil), // 5: sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue
	(*PasswordSpecificsData_Notes_Note)(nil),                   // 6: sync_pb.PasswordSpecificsData.Notes.Note
	(*EncryptedData)(nil),                                      // 7: sync_pb.EncryptedData
}
var file_password_specifics_proto_depIdxs = []int32{
	3,  // 0: sync_pb.PasswordSpecificsData.password_issues:type_name -> sync_pb.PasswordSpecificsData.PasswordIssues
	4,  // 1: sync_pb.PasswordSpecificsData.notes:type_name -> sync_pb.PasswordSpecificsData.Notes
	7,  // 2: sync_pb.PasswordSpecifics.encrypted:type_name -> sync_pb.EncryptedData
	0,  // 3: sync_pb.PasswordSpecifics.client_only_encrypted_data:type_name -> sync_pb.PasswordSpecificsData
	1,  // 4: sync_pb.PasswordSpecifics.unencrypted_metadata:type_name -> sync_pb.PasswordSpecificsMetadata
	7,  // 5: sync_pb.PasswordSpecifics.encrypted_notes_backup:type_name -> sync_pb.EncryptedData
	5,  // 6: sync_pb.PasswordSpecificsData.PasswordIssues.leaked_password_issue:type_name -> sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue
	5,  // 7: sync_pb.PasswordSpecificsData.PasswordIssues.reused_password_issue:type_name -> sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue
	5,  // 8: sync_pb.PasswordSpecificsData.PasswordIssues.weak_password_issue:type_name -> sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue
	5,  // 9: sync_pb.PasswordSpecificsData.PasswordIssues.phished_password_issue:type_name -> sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue
	6,  // 10: sync_pb.PasswordSpecificsData.Notes.note:type_name -> sync_pb.PasswordSpecificsData.Notes.Note
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_password_specifics_proto_init() }
func file_password_specifics_proto_init() {
	if File_password_specifics_proto != nil {
		return
	}
	file_encryption_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_password_specifics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordSpecificsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_password_specifics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordSpecificsMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_password_specifics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordSpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_password_specifics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordSpecificsData_PasswordIssues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_password_specifics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordSpecificsData_Notes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_password_specifics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordSpecificsData_PasswordIssues_PasswordIssue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_password_specifics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordSpecificsData_Notes_Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_password_specifics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_password_specifics_proto_goTypes,
		DependencyIndexes: file_password_specifics_proto_depIdxs,
		MessageInfos:      file_password_specifics_proto_msgTypes,
	}.Build()
	File_password_specifics_proto = out.File
	file_password_specifics_proto_rawDesc = nil
	file_password_specifics_proto_goTypes = nil
	file_password_specifics_proto_depIdxs = nil
}
